#include "test_support/catch.hh"
#include "types.h"
#include "util/pack/lzss.h"
#include "util/range.h"

using namespace au;
using namespace au::util::pack;

static void do_test(const bstr &input, const bstr &expected)
{
    const auto actual = lzss_decompress_bytewise(input, expected.size());
    INFO("Actual: " + actual.str());
    INFO("Expected: " + expected.str());
    REQUIRE(actual == expected);
}

static void do_test(const bstr &input, size_t size)
{
    do_test(input, bstr(size, 'a'));
}

TEST_CASE("Decompressing bytewise LZSS streams", "[util][pack]")
{
    do_test("\x07""123"_b, "123"_b);
    do_test("\x07""123\xEE\xF0"_b, "123123"_b);
    do_test("\x07""123\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF0"_b,
        "123123123123123123123123123"_b);
    do_test("\xFFLife is \x0F""code"_b, "Life is code"_b);

    do_test("\x01\x61"_b, 1);
    do_test("\x03\x61\x61"_b, 2);
    do_test("\x07\x61\x61\x61"_b, 3);
    do_test("\x0F\x61\x61\x61\x61"_b, 4);
    do_test("\x1F\x61\x61\x61\x61\x61"_b, 5);
    do_test("\x07\x61\x61\x61\xEE\xF0"_b, 6);
    do_test("\x17\x61\x61\x61\xEE\xF0\x61"_b, 7);
    do_test("\x37\x61\x61\x61\xEE\xF0\x61\x61"_b, 8);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF0"_b, 9);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF1"_b, 10);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF2"_b, 11);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3"_b, 12);
    do_test("\x27\x61\x61\x61\xEE\xF0\xEE\xF3\x61"_b, 13);
    do_test("\x67\x61\x61\x61\xEE\xF0\xEE\xF3\x61\x61"_b, 14);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF0"_b, 15);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF1"_b, 16);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF2"_b, 17);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF3"_b, 18);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF4"_b, 19);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF5"_b, 20);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF6"_b, 21);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF7"_b, 22);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF8"_b, 23);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9"_b, 24);
    do_test("\x47\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\x61"_b, 25);
    do_test("\xC7\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\x61\x61"_b, 26);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF0"_b, 27);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF1'"_b, 28);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF2'"_b, 29);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF3'"_b, 30);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF4'"_b, 31);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF5'"_b, 32);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF6'"_b, 33);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF7'"_b, 34);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF8'"_b, 35);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xF9'"_b, 36);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xFA'"_b, 37);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xFB'"_b, 38);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xFC'"_b, 39);
    do_test("\x07\x61\x61\x61\xEE\xF0\xEE\xF3\xEE\xF9\xEE\xFD'"_b, 40);
}
